
Check if docker-pull is needed when forking.

Documentation for adding a new language.

Server Upgrade
  o) copy disk on cyber-dojo.org
     Current disk is SSD 200GB and is 75% inode full.
     Current spec is 2CPU, 7.5GB.

     On web-console page
     Disks choose cdf-server
     Click CreateSnapshot
     called it cdf-server-snaphot-for-new-server
     Being created now...
     Then created new-instance from it.
     Then edited its disk - resized to 300GB
     Then ssh'd in
     How can I check how big disk is?
     sudo fdisk -l | grep Disk
       confirms disk is 300GB
     df -H -i
       shows still 75% Inode full :-(
    Ah but https://cloud.google.com/compute/docs/disks/add-persistent-disk
    says you have to resize the filesystem.
    Didn't work :-(
    How about rsync/scp'ing across?

  o) create new server from disk-copy using Ubuntu 15.10 as base OS
  o) use modified docker-compose.yml
     Need to remove this line from docker-compose.yml
       volumes_from:
         - ${CYBER_DOJO_KATAS_DATA_CONTAINER}:rw
     Need to add this
       volumes:
         - /var/www/cyber-dojo/katas:${CYBER_DOJO_ROOT}/katas:rw
  o) Make sure katas folder had user-rights matching user inside the web container.
     $ userdel cyber-dojo
     $ adduser --disabled-password --disabled-login --uid 19661 cyber-dojo
     $ cd /var/www/cyber-dojo
     $ sudo chown -R cyber-dojo:cyber-dojo katas
     $ cd ~
     $ sudo ./cyber-dojo pull all
     $ sudo ./cyber-dojo up

     Need to comment out this line in cyber-dojo.sh
       # one_time_creation_of_katas_data_container

  o) This should hopefully fix the 100% cpu bug I've been occasionally hitting
     See https://github.com/docker/docker/issues/18180
     One GCE creating a bare server using Ubuntu 14.04 shows
     $ uname -r
     3.19.0-64-generic
     One GCE creating a bare server using Ubuntu 15.10 shows
     $ uname -r
     4.2.0-42-generic

- - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - -

an output file is actually stored in the sandbox of an avatar.
this is not right. it means the avatar cant create an output file
for itself. The output 'file' should only be in the manifest.

- - - - - - - - - - - - - - - - - - - - -

If the katas object (saver/storer) can be decoupled from git it could be a big
win for testing as I could then probably re-instate FakeDisk.
I think there are 3 kinds of 'storer'.

1. katas_storer
   Holds manifest.json as a direct copy of start-point info
   which it is then decoupled from.
   Should also have method to colour(output)

2. avatar_storer
   Holds the sandbox which may hold binary files (.class, .so, etc)
   What the avatar's run-test uses (currently tar-piped in-out)

3. tag_storer
   Holds increments.json which contains date-time-stamp info
   on each traffic-light.
   Also holds one folder per tag which can contain single json
   file holding
     o) visible_files
     o) output
     o) colour (red/amber/green)

- - - - - - - - - - - - - - - - - - - - -

I would still need a 'converter' service which would be given a kata id
and would check if this was stored in (current) git format on hard-disk.
If it was it would issue all commands necessary to the storers and then
delete the kata from the hard-disk.
It would need
o) katas mounted
o) link to all 3 storers.

- - - - - - - - - - - - - - - - - - - - -

downloader could also be a new service...
downloader currently returns a zip file of the whole kata with a git repo
per animal.  To decouple this from git I could return a zip in the tag-storer
format (one subdir per tag).
I could insert a shell script file into this zip which (when run) would convert
the unzipped structure it into the current (git) format (it would also check
that git was installed)
Should this be a new service or in the storer?

- - - - - - - - - - - - - - - - - - - - -

Possible services
- tag_differ
- tag_storer
- avatar_storer
- kata_storer
- kata_converter
- downloader????
- avatar_runner

- - - - - - - - - - - - - - - - - - - - -

git 2.9+ has new  `--compaction-heuristic`
for improved diffs. Try to get this in place.
(git version in web image is 2.8.3)
Alpine-linux has a package for 2.9.1-r0 (branch=edge, repo=main)

When you do a git tag do you have to supply
user-name and user-email?

- - - - - - - - - - - - - - - - - - - - -

Have 'storer' as a separate service is also something I've been thinking about.
This may involve send tgz files back and forth. This makes it important the
sandbox folders do *not* contain files such as nunit.framework.dll
which will bloat the tgz file size (such files should be in the docker-image).

- - - - - - - - - - - - - - - - - - - - -

change output of [./cyber-dojo start-point ls] from relative paths to absolute paths
viz from
  NAME        TYPE        SRC
  custom      custom      ./../../start-points-custom
to
  NAME        TYPE        SRC
  custom      custom      /Users/jonjagger/repos/start-points-custom

- - - - - - - - - - - - - - - - - - - - -

Move runners from lib/code to app/lib/code

- - - - - - - - - - - - - - - - - - - - -

for tests I have to put red_amber_green lambdas (such as bash_unit)
into the output.colour_of. Can this dependency be broken?

- - - - - - - - - - - - - - - - - - - - -

web_base/Dockerfile still has this line
   && cd ${CYBER_DOJO_HOME} ; bundle install --without development test \

- - - - - - - - - - - - - - - - - - - - -

Would be good to have a [cyber-dojo] cli command to export
a specific kata to a given folder. This would make it easier
to create custom exercises. Must not export to default VM
on Mac/Windows quickstart-terminal.

- - - - - - - - - - - - - - - - - - - - -

Make [cyber-dojo clean] remove dead containers as well as dead images?

- - - - - - - - - - - - - - - - - - - - -

Add C# XUnit test framework.
http://xunit.github.io/

- - - - - - - - - - - - - - - - - - - - -

Looking to make some smaller alpine-linux language images.
Specifically, C#-NUnit and Java-JUnit
Once I've got new base-image it should, in theory, just be
a case of changing the FROM command in each test-framework's Dockerfile

Java
frolvlad/alpine-oraclejdk8:slim
  How big is it? ~166.9 MB  (vs 843.7 MB)
  docker run --rm frolvlad/alpine-oraclejdk8:slim sh -c "javac -version"
    javac 1.8.0_92
  There is a package called junit (branch=edge, repo=testing)

Put Alpine based small images into cyberdojo repo.

Dockerfiles/C#/Moq is now Alpine-based. Dockerfile starts
FROM frolvlad/alpine-mono
whose Dockerfile is

FROM frolvlad/alpine-glibc:alpine-3.4

RUN apk add --no-cache --virtual=.build-dependencies wget ca-certificates tar xz && \
    wget "https://www.archlinux.org/packages/extra/x86_64/mono/download/" -O "/tmp/mono.pkg.tar.xz" && \
    tar -xJf "/tmp/mono.pkg.tar.xz" && \
    cert-sync /etc/ssl/certs/ca-certificates.crt && \
    apk del .build-dependencies && \
    rm /tmp/*

And frolvlad/alpine-glibc:alpine-3.4
has this Dockefile

FROM alpine:3.4

# Here we install GNU libc (aka glibc) and set C.UTF-8 locale as default.

RUN ALPINE_GLIBC_BASE_URL="https://github.com/sgerrand/alpine-pkg-glibc/releases/download" && \
    ALPINE_GLIBC_PACKAGE_VERSION="2.23-r3" && \
    ALPINE_GLIBC_BASE_PACKAGE_FILENAME="glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk" && \
    ALPINE_GLIBC_BIN_PACKAGE_FILENAME="glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk" && \
    ALPINE_GLIBC_I18N_PACKAGE_FILENAME="glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk" && \
    apk add --no-cache --virtual=.build-dependencies wget ca-certificates && \
    wget \
        "https://raw.githubusercontent.com/andyshinn/alpine-pkg-glibc/master/sgerrand.rsa.pub" \
        -O "/etc/apk/keys/sgerrand.rsa.pub" && \
    wget \
        "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME" && \
    apk add --no-cache \
        "$ALPINE_GLIBC_BASE_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_BIN_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_I18N_PACKAGE_FILENAME" && \
    \
    rm "/etc/apk/keys/sgerrand.rsa.pub" && \
    /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true && \
    echo "export LANG=C.UTF-8" > /etc/profile.d/locale.sh && \
    \
    apk del glibc-i18n && \
    \
    rm "/root/.wget-hsts" && \
    apk del .build-dependencies && \
    rm \
        "$ALPINE_GLIBC_BASE_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_BIN_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_I18N_PACKAGE_FILENAME"

ENV LANG=C.UTF-8

- - - - - - - - - - - - - - - - - - - - -

add [ci skip] to git commit messages if you want
to skip the travis build

- - - - - - - - - - - - - - - - - - - - -

un-hardwire setting of 2 core env-vars in cyber-dojo script.
  export CYBER_DOJO_DATA_ROOT="/home/docker/data"
  export CYBER_DOJO_KATAS_ROOT="/home/docker/data/katas"

- - - - - - - - - - - - - - - - - - - - -

exercises refactoring
  use disk[path].each_rdir('instructions') in its make_cache()
  so you can have whatever folder structure you like.

- - - - - - - - - - - - - - - - - - - - -

cyber-dojo.rb failure messages are
FAILED: ....
Check what [docker] does and mimic that.
$ docker images --ssss
flag provided but not defined: --ssss
See 'docker images --help'.
Test these with shunit2 tests.

- - - - - - - - - - - - - - - - - - - - -

app_controllers tests has this warning
/usr/lib/ruby/gems/2.3.0/gems/activesupport-4.1.0/lib/active_support/values/time_zone.rb:285: warning: circular argument reference - now
Tried upgrading to Ruby 4.2.6
solves this as long Gemfile.lock is not part of the docker context
(remove it from web's dockerignore file)
This causes a few app_controller deprecation warnings
and a load of app_controller test fails which seem to be due to bad URLs

- - - - - - - - - - - - - - - - - - - - -

Occasional test failures (when run locally)...
  ForkerControllerTest#test_'EAE021',
    when language no longer exists, the fork fails, and the reason given is language
  SetupControllerTest#test_'EB77D9',
    show_exercises page uses cached exercises that are runnable

  Tests are defintely not unit-tests and almost certainly have order
  dependencies. State of cache files. How to resolve?

  I could reinstate FakeDisk, leave env-vars for data ROOTs, then
  fill FakeDisk with known content, then do access to dojo methods
  such as dojo.exercises

  For now, deleting caches at start of app_controller tests.

- - - - - - - - - - - - - - - - - - - - -

Note: need a check that each docker image has a user in it called nobody
      (I don't think it's uid is important)

- - - - - - - - - - - - - - - - - - - - -

)) get travis to push images to cdf hub?
   push images to cyberdojofoundation hub if tests pass

- - - - - - - - - - - - - - - - - - - - -

)) add confirmation diagnostic to each [cyber-dojo] command?

----------------------------------------

Features James mentioned during our chat
- - - - - - - - - - - - - - - - - - - -

feature: only one error in C/C++ projects

feature: replace duration on dashboard with time-ticks on top of minute columns.

feature: sed in the editor (search and replace)

feature: on enter page, when kata id is entered and buttons become enabled
         it would be nice to see the display_name in the footer.

feature: copy one animal to a new one (keeping whole traffic-light history)

feature: fork giving two options, viz create new kata and create start-point

feature: hovering over a traffic-light gives more detail, viz for changed files (not output)
         name of file, no of deleted lines, no of added lines

feature: traffic-lights have some visual indication if there is a
         "suspiciously large change"
         eg more than 1 file changed
         eg more than 3 lines changed in a non-test file

feature: hyperlink of compiler error on output to file and line number

feature: colour syntax?

