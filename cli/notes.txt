
I need red_green_amber lambda fall-back when *forking* an old kata.
Should get that for free as long as I copy unit_test_framework if it exists

- - - - - - - - - - - - - - - - - - - - -

Plan.
done: get 100% coverage for app_models/kata again by faking old-style kata
done: add new app_lib/setup_data_checker_test for red_amber_green being required
done: make red_amber_green required key in start-point volume
done: add test that creates old kata (delete red_amber_green) and check it works ok
done: make unit_test_framework optional key (app_lib/setup_data_checker and its tests)
done: don't save unit_test_framework when creating kata manifest
done: don't save unit_test_framework when creating kata manifest (when forking)
done: delete unit_test_framework from all start-point manifests
done: make unit_test_framework unknown key in setup_data_checker and its tests
done: remove unit_test_framework from start-point

- - - - - - - - - - - - - - - - - - - - -

Inside the web container s/data/start-points/
is a good folder rename.

- - - - - - - - - - - - - - - - - - - - -

if [docker pull] command on new setup pages fails then I need to
bail out of creating the kata.

- - - - - - - - - - - - - - - - - - - - -

When creating a kata (host_disk_katas.rb)
save language manifest properties into katas manifest
so all kata's methods look at least like image_name, viz
  manifest_property || start_point.NAME

- - - - - - - - - - - - - - - - - - - - -

diff-dialog from test page should have fork button.

- - - - - - - - - - - - - - - - - - - - -

Need to add a cpu limit to running docker containers.
This will stop 100% rogue cpu process.

- - - - - - - - - - - - - - - - - - - - -

Add C# XUnit test framework.
http://xunit.github.io/

- - - - - - - - - - - - - - - - - - - - -

In cli, change terminology from volume to start-point ?

- - - - - - - - - - - - - - - - - - - - -

$ cyber-dojo up
Have this display the arguments that are defaulted?, viz
Start-point: languages -> https://github.com/start-point-languages.git
Start-point: exercises -> https://github.com/start-point-exercises.git
Start-point:    custom -> https://github.com/start-point-custom.git
cyber-dojo up --languages=languages --exercises=exercises --custom=custom

- - - - - - - - - - - - - - - - - - - - -

Would be good to have a [cyber-dojo] cli command to export
a specific kata to a given folder. This would make it easier
to create custom exercises. Must not export to default VM
on Mac/Windows quickstart-terminal.

- - - - - - - - - - - - - - - - - - - - -

Make [cyber-dojo clean] remove dead containers as well as dead images?

- - - - - - - - - - - - - - - - - - - - -

Looking to make some smaller alpine-linux language images.
Specifically, C#-NUnit and Java-JUnit

Java
frolvlad/alpine-oraclejdk8:slim
  How big is it? ~166.9 MB  (vs 843.7 MB)
  docker run --rm frolvlad/alpine-oraclejdk8:slim sh -c "javac -version"
    javac 1.8.0_92
  There is a package called junit (branch=edge, repo=testing)

Put Alpine based small images into cyberdojo repo.

- - - - - - - - - - - - - - - - - - - - -

Debug logging seems to show clean_up (in cyber-dojo.sh) being called twice...
Is this because (clean_up && exit_fail) is in () and so is a sub-shell?

- - - - - - - - - - - - - - - - - - - - -

new kata has been created dialog box, and here is its HEX-ID
  this could offer several buttons instead of just ok (which takes you back to home page)
    o) button to take you to home page
    o) button to take you to enter page
    o) button to immediately start an avatar

- - - - - - - - - - - - - - - - - - - - -

default-setup-page
  one 1st step have 2 buttons
    [choose exercise] [setup now]
or
  on 2nd step
    [setup with no exercise] [setup now]

- - - - - - - - - - - - - - - - - - - - -

git 2.9+ has new  `--compaction-heuristic`
for improved diffs. Try to get this in place.

- - - - - - - - - - - - - - - - - - - - -

test/app_lib/setup_data/languages
test/app_lib/setup_data/exercises
test/app_lib/setup_data/custom
These should all have the data-checker run against them as part of the tests.

- - - - - - - - - - - - - - - - - - - - -

add [ci skip] to git commit messages if you want
to skip the travis build

- - - - - - - - - - - - - - - - - - - - -

cyber-dojo.rb failure messages are
FAILED: ....
Check what [docker] does and mimic that.
$ docker images --ssss
flag provided but not defined: --ssss
See 'docker images --help'.
Test these with shunit2 tests.

- - - - - - - - - - - - - - - - - - - - -

test/languages/test_languages_manifests.rb
  on startup should the app should run the tests/checks
  to verify 3 setup volumes are well-formed?

- - - - - - - - - - - - - - - - - - - - -

Now that data is externalized I can arrange for it to
always be at the same locations inside the web container!
I don't need CYBER_DOJO_EXERCISES_ROOT et al.
But it is worth keeping them anyway for setting up
a local (not inside docker) web server?
No I don't need them for that either.

caches_dir needs to be ENV_VAR
Its used in app_controllers/setup_test.rb
Or rather a ROOT_DIR is needed. Really its RAILS_ROOT

Can these just be off RAILS_ROOT?
  caches/  YES
  downloads/  YES
  katas/ YES. Even if server uses non data-container /var/www/cyber-dojo/katas
              this can be mapped to /usr/src/cyber-dojo/katas
  data/  NO. not for local dev-server


CYBER_DOJO_DATA_ROOT
 can be anywhere inside web server, docker-compose.yml should just work
  as it volume-mounts to data-root automatically.
 points to data-repos on local server

get tests running and passing on local server first?

- - - - - - - - - - - - - - - - - - - - -

app_controllers tests has this warning
/usr/lib/ruby/gems/2.3.0/gems/activesupport-4.1.0/lib/active_support/values/time_zone.rb:285: warning: circular argument reference - now
Tried upgrading to Ruby 4.2.6
solves this as long Gemfile.lock is not part of the docker context
(remove it from web's dockerignore file)
This causes a few app_controller deprecation warnings
and a load of app_controller test fails which seem to be due to bad URLs

- - - - - - - - - - - - - - - - - - - - -

Having Gemfile as part of web's docker image context is unfortunate.
It means the Alpine apk update stuff repeats unnecessarily if, for
example, you bump the rails version in Gemfile.

- - - - - - - - - - - - - - - - - - - - -

Occasional test failures...
  ForkerControllerTest#test_'EAE021',
    when language no longer exists, the fork fails, and the reason given is language
  SetupControllerTest#test_'EB77D9',
    show_exercises page uses cached exercises that are runnable

  Tests are defintely not unit-tests and almost certainly have order
  dependencies. State of cache files. How to resolve?

  I could reinstate FakeDisk, leave env-vars for data ROOTs, then
  fill FakeDisk with known content, then do access to dojo methods
  such as dojo.exercises

  For now, deleting caches at start of app_controller tests.

- - - - - - - - - - - - - - - - - - - - -

Note: need a check that each docker image has a user in it called nobody
      (I don't think it's uid is important)

- - - - - - - - - - - - - - - - - - - - -

If the server is up you can still do [docker rmi image]
So I still need proper nil error handling on the setup pages

- - - - - - - - - - - - - - - - - - - - -

Cribs

Network repo
ruby ./cyber-dojo.rb volume create --name=languages --git=https://github.com/cyber-dojo/start-points-languages.git
ruby ./cyber-dojo.rb volume create --name=exercises --git=https://github.com/cyber-dojo/start-points-execises.git
ruby ./cyber-dojo.rb volume create --name=custom --git=https://github.com/cyber-dojo/start-points-custom.git

Local repo
ruby ./cyber-dojo.rb volume create --name=jon --git=file:///Users/jonjagger/repos/start-points-exercises

- - - - - - - - - - - - - - - - - - - - -

)) ./cyber-dojo catalog

     $ ./cyber-dojo volume inspect VOL [VOL...]

       This would do the old catalog listing.
       This should show the origin (URL) of the volume.
       Need to make the languages checker work by being
       passed a path (there are now 2 manifest locations, exercises and languages)
       Then [volume inspect] call will then do
         docker run --rm -v VOL:/data sh -c "app/lib/check_setup_volume.rb /data"
           check_setup_volume.rb will parse ARGV etc and delegates to setup_volume_checker.rb

       test/languages/test_languages_manifest.rb
         Rework to utility rather than test with asserts.

       Ownership of all files should be cyber-dojo
           (comes in from a volume)

     cyber-dojo.rb could do with some documentation showing example output
     of various internal commands.

- - - - - - - - - - - - - - - - - - - - -

)) finish the what/how separation

     Union of collection. Do in later release.
     ./cyber-dojo up --exercises=alpha,beta
        With meta-data the command could simplify to [./cyber-dojo up a,b] ?? no.

        unioning affects the UX quite a lot.
        It also introduces the possiblity of manifests from different collections
        having an identical display_name...

        DONT add the collection name to the path because then it will *NOT* replace
        the default it will union with it...

        Unioning means I will somehow need to create multiple docker-compose yml files
        from a 'template'
        Don't really want multiple yml files - much simpler to pull just one
        from the web image when doing a [./cyber-dojo update]

     give collections a defined api and meta-data
       each collection manifest specifies if is for languages/exercises/instructions
       each volume label adds the URL it was created from
       each language manifest specifies whether its docker-image should be auto pulled. default=no

- - - - - - - - - - - - - - - - - - - - -

)) cyber-dojo data repos should be data only; move .rb files somewhere else.

- - - - - - - - - - - - - - - - - - - - -

)) add another docker-compose.yml for main prod server
     prod server uses volume-mount for katas (not data-container)
     so I will need to use an docker-compose extension .yml file for
     specifying the katas (like I'll be doing for exercises/languages/instructions)

- - - - - - - - - - - - - - - - - - - - -

)) get latest image running on GCE
   Did it with hacked cyber-dojo script file that does not extract docker-compose.yml file
   from web container and mounts katas as a volume rather than a data-container.
   Had to make sure katas folder had user-rights matching user inside the web container.
   $ userdel cyber-dojo
   $ adduser --disabled-password --disabled-login --uid 19661 cyber-dojo
   $ cd /var/www/cyber-dojo
   $ sudo chown -R cyber-dojo:cyber-dojo katas
   $ cd ~
   $ sudo ./cyber-dojo pull all
   $ sudo ./cyber-dojo up

- - - - - - - - - - - - - - - - - - - - -

)) get travis to push images to cdf hub
   push images to cyberdojofoundation hub if tests pass

- - - - - - - - - - - - - - - - - - - - -

)) documentation

- - - - - - - - - - - - - - - - - - - - -

)) abandoned the column titles on left/right lists on setup page.
   instead use info panel.

   Ask James if he can put his 3 exercises onto his github account
   and I will use it as part of documentation.

- - - - - - - - - - - - - - - - - - - - -

)) add confirmation diagnostic to each [cyber-dojo] command?

----------------------------------------

Day with James :-)


mkdir tryout
cd tryout
git clone https://github.com/JonJagger/cyber-dojo.git
cd cyber-dojo
git branch drop-katas-data-container origin/drop-katas-data-container
git checkout drop-katas-data-container

Edited app/docker/cyber-dojo to make two hard-wired env-vars for paths
point to new locations (under tryout)

Built a new web image

Tried to create a new server ontop of old one.
Could not do [./cyber-dojo restart]
>>>>>>It complained that cdf-nginx and cdf-web already existed.
Manually deleted them.

Started server.
Failed to create a kata because of permissions.
   (Note that katas is being volume-mounted (not volumes-from) in docker-compose.yml)
There is no cyber-dojo user.
On my dev default server
cat /etc/passwd
cyber-dojo:x:19661:19661:Linux User,,,:/home/cyber-dojo:/bin/sh

And this user does not exist on James's machine (Ubuntu)
$ adduser --disabled-password --no-create-home --uid 19661 cyber-dojo
Then
$ cd app/data
$ chown -R cyber-dojo katas

Then could create kata :-)
But problem with no root /cpputest folder (same as I had on my dev macbook)

$ docker run --rm -it cyberdojofoundation/cpp_cpputest sh
$ cd /
$ ls -al

Indeed there is no root folder /cpputest

Tried to recreate gpp_cpputest docker image
rebuilt image
didn't work
There is no user called cyber-dojo *inside* the gpp_cpputest container
Problem is that the image gpp_cpputest is not based FROM user-base
and so does not have cyber-dojo user inside it.
>>>>>>>I think this is not relevant. The user that runs inside the test container
is nobody. The cyber-dojo user is needed only inside the web container
(and also possibly on the host server for volume-mount interactions)


Switched create page to show plain languages
Make katas using C++, CppUTest (and C, CppUTest)
was ok, edited cyber-dojo.sh, /cpputest was there, got a red traffic-light
on the server went to katas/50/5C05.../manifest.json
language:C++ (g++)-CppUTest

Switched create page back to custom exercises.
Made new kata
katas/21/AD6F.../manifest.json
language:C

Aha!!!!
Manually edited the katas manifest.json
to "C++ (g++)-CppUTest"
and it worked. Woooooohoooooo

So the problem is the creation of the kata's manifest.
Looked at the code and fixed up the errors.
Works for both setup cases now: languages and exercises.

Retro: would be nice if you can find out the name of the
container/image from inside the container.

-------------

Tried again.

new server
installed docker
pulled from gihub
pulled new branch
edited app/docker/cyber-dojo to make two hard-wired env-vars for paths
built a new web image
>>>>>>>>tried to create kata - failed with nil Rails error.
Look into this on my own server.

--------------

Features James mentioned during our chat
- - - - - - - - - - - - - - - - - - - -

revert button is in diff dialog again

feature: on enter page, when kata id is entered and buttons become enabled
         it would be nice to see the language and exercise names in the footer.

feature: sed in the editor (search and replace)

feature: copy one animal to a new one (keeping whole traffic-light history)

feature: fork giving two options, viz create new start-points data.

feature: replace duration on dashboard with time-ticks on top of minute columns.

feature: hovering over a traffic-light gives more detail, viz for changed files (not output)
         name of file, no of deleted lines, no of added lines

feature: traffic-lights have some visual indication if there is a
         "suspiciously large change"
         eg more than 1 file changed
         eg more than 3 lines changed in a non-test file

feature: hyperlink of compiler error on output to file and line number

feature: only one error in C/C++ projects

feature: colour syntax

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

un-hardwire setting of 2 core env-vars in cyber-dojo script.
  export CYBER_DOJO_DATA_ROOT="/home/docker/data"
  export CYBER_DOJO_KATAS_ROOT="/home/docker/data/katas"

instructions refactored to be manifest'ed
  use disk[path].each_rdir('instructions') in its make_cache()
  Only instructions file would be shown on 2nd setup page.
