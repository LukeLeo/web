

$ ./cyber-dojo up [languages=NAME] [exercises=NAME] [instructions=NAME]

Will this work? When you create a volume do you set the path it is
mapped to? Or is that set in the Dockerfile's VOLUME command?
I need to incorporate LEI into the command

$ ./cyber-dojo languages name=URL
$ ./cyber-dojo exercise name=URL
$ ./cyber-dojo instructions name=URL

This means the name's will need to be passed into to docker-compose.yml
so it can use volumes_from: to mount them.

For the default-language data-container, the default-language image
will exist but I will still need to create the data-container
from the image when using [$ ./cyber-dojo up]
Implies script will need to detect if data-container already exists.
Unless I just remove the container and then create it.
But that will lose updates if there have been any (to exercises).

Another option is to create the containers only when the
$ ./cyber-dojo up ...
command is issued.

Another thorny issue could be that the
$ ./cyber-dojo catalog
command also requires the language volume.

This suggests a config file that stores the current
choice of language,exercise,instructions.

Would be nice to allow several data-containers to be "unioned"
$ ./cyber-dojo up languages=jon1,jon2

This approach also suggests that the pulling of docker images is tied
to the selection of language-manifests that are pulled via the
$ ./cyber-dojo languages-push path

Maybe it is simpler to specify that if you are on a Docker-Quickstart-Terminal
you have to first ssh into the default VM and then run all the commands from there.
This means changes people make to the laptop when installing and using cyber-dojo
locally are more isolated. For example you wouldn't have to do anything as root on you
bare laptop it would all be inside the default VM.
A downside with this is the probable lack of dev tools on default if you wanted to
work on the code (eg Frank)
This would mean installing docker and docker-machine on the laptop - but not docker-compose.
Then ssh'ing into default and installing docker-compose inside default.

$ docker-machine ssh default
$$ curl -L https://github.com/docker/compose/releases/download/1.7.0/docker-compose-`uname -s`-`uname -m` > docker-compose
$$ chmod +x docker-compose
$$ sudo mv docker-compose /usr/local/bin/docker-compose

That should be scriptable from the Quickstart Terminal.

docker-machine ssh default curl -L https://github.com/docker/compose/releases/download/1.7.0/docker-compose-`uname -s`-`uname -m` > docker-compose

Nope. Sheesh this is not so easy. The `uname -s` has to be executed in default.
10 mins and no obvious solution.
Instead create this as a script called install-docker-compose.sh

curl -L https://github.com/docker/compose/releases/download/1.7.0/docker-compose-`uname -s`-`uname -m` > docker-compose
chmod +x docker-compose
sudo mv docker-compose /usr/local/bin/docker-compose

Suppose its saved at this URL (note the //raw)

https://raw.githubusercontent.com/JonJagger/cyber-dojo/drop-katas-data-container/app/docker/install-docker-compose.sh

Then do this

$ docker-machine ssh default "curl -O https://raw.githubusercontent.com/JonJagger/cyber-dojo/drop-katas-data-container/app/docker/install-docker-compose.sh && chmod +x install-docker-compose.sh && ./install-docker-compose.sh"

The quotes are necessary.

- - - - - - - - - - - - - - - - - - - - -

I can still create a cyber-dojo script for use in the QuickStart terminal
and all it does it delegate to the proper cyber-dojo script inside the default VM.

- - - - - - - - - - - - - - - - - - - - -

install nano inside default VM
$ tce-load -wi nano
$ export TERM=xterm

- - - - - - - - - - - - - - - - - - - - -
ok. with the cyber-dojo.rb script call commented out I can now do this...

This uses the languages *inside* the web image
$ ./cyber-dojo up

This creates a new languages volume and mounts that which overwrites the default
$ ./cyber-dojo create-volume jon=https://github.com/JonJagger/cyber-dojo-exercises.git
$ ./cyber-dojo up languages=james

Possibly a better name is
$ ./cyber-dojo create-collection jon=https://github.com/JonJagger/cyber-dojo-exercises.git

Seems like a good idea to require that each git repo has a meta-data file in it
which specifies whether its [languages/exercises/instructions].

Union of several languages volumes, eg
$ ./cyber-dojo up languages=james,jon
This will require the following folder structure
/usr/src/cyber-dojo/app/data/languages/jon/...
/usr/src/cyber-dojo/app/data/languages/james/...

- - - - - - - - - - - - - - - - - - - - -

git sub modules
---------------
cd cyber-dojo
cd app/data
git rm -r languages
git submodule add https://github.com/JonJagger/cyber-dojo-languages.git languages
git commit -am "changed app/data/languages to be a submodule"
git push

- - - - - - - - - - - - - - - - - - - - -

./cyber-dojo catalog
This could be available only when the server is up...
Does it show the catalog of the languages? the exercises?

----------------------------------------

Day with James :-)


mkdir tryout
cd tryout
git clone https://github.com/JonJagger/cyber-dojo.git
cd cyber-dojo
git branch drop-katas-data-container origin/drop-katas-data-container
git checkout drop-katas-data-container

Edited app/docker/cyber-dojo to make two hard-wired env-vars for paths
point to new locations (under tryout)

Built a new web image

Tried to create a new server ontop of old one.
Could not do [./cyber-dojo restart]
>>>>>>It complained that cdf-nginx and cdf-web already existed.
Manually deleted them.

Started server.
Failed to create a kata because of permissions.
   (Note that katas is being volume-mounted (not volumes-from) in docker-compose.yml)
There is no cyber-dojo user.
On my dev default server
cat /etc/passwd
cyber-dojo:x:19661:19661:Linux User,,,:/home/cyber-dojo:/bin/sh

And this user does not exist on James's machine (Ubuntu)
$ adduser --disabled-password --no-create-home --uid 19661 cyber-dojo
Then
$ cd app/data
$ chown -R cyber-dojo katas

Then could create kata :-)
But problem with no root /cpputest folder (same as I had on my dev macbook)

$ docker run --rm -it cyberdojofoundation/cpp_cpputest sh
$ cd /
$ ls -al

Indeed there is no root folder /cpputest

Tried to recreate gpp_cpputest docker image
rebuilt image
didn't work
There is no user called cyber-dojo *inside* the gpp_cpputest container
Problem is that the image gpp_cpputest is not based FROM user-base
and so does not have cyber-dojo user inside it.
>>>>>>>I think this is not relevant. The user that runs inside the test container
is nobody. The cyber-dojo user is needed only inside the web container
(and also possibly on the host server for volume-mount interactions)


Switched create page to show plain languages
Make katas using C++, CppUTest (and C, CppUTest)
was ok, edited cyber-dojo.sh, /cpputest was there, got a red traffic-light
on the server went to katas/50/5C05.../manifest.json
language:C++ (g++)-CppUTest

Switched create page back to custom exercises.
Made new kata
katas/21/AD6F.../manifest.json
language:C

Aha!!!!
Manually edited the katas manifest.json
to "C++ (g++)-CppUTest"
and it worked. Woooooohoooooo

So the problem is the creation of the kata's manifest.
Looked at the code and fixed up the errors.
Works for both setup cases now: languages and exercises.

Retro: would be nice if you can find out the name of the
container/image from inside the container.

-------------

Tried again.

new server
installed docker
pulled from gihub
pulled new branch
edited app/docker/cyber-dojo to make two hard-wired env-vars for paths
built a new web image
>>>>>>>>tried to create kata - failed with nil Rails error.
Look into this on my own server.


Inside web image ls at root shows this
....  20530566 May 10 10:53 docker-1.11.1.tgz
There is also an empty docker folder there too.
These can be removed in the Dockerfile
>>>>>>>>Needs to be...

RUN apk --update add curl \
  && curl -OL https://get.docker.com/builds/Linux/x86_64/docker-${DOCKER_VERSION}.tgz \
  && tar -xvzf docker-${DOCKER_VERSION}.tgz \
  && mv docker/* /usr/bin/ \
  && rmdir /docker \
  && rm /docker-${DOCKER_VERSION}.tgz \
  && apk del curl \


--------------

Features James mentioned during our chat
- - - - - - - - - - - - - - - - - - - -

revert button is in diff dialog again

on enter page, when kata id is entered and buttons become enabled
it would be nice to see the language and exercise names in the footer.

feature: sed in the editor (search and replace)

feature: copy one animal to a new one (keeping whole traffic-light history)

feature: fork giving two options, viz create new exercise-starting-point.

feature: replace duration on dashboard with time-ticks on top of minute columns.

feature: hovering over a traffic-light gives more detail, viz for changed files (not output)
         name of file, no of deleted lines, no of added lines

feature: traffic-lights have some visual indication if there is a
         "suspiciously large change"
         eg more than 1 file changed
         eg more than 3 lines changed in a non-test file

feature: hyperlink of compiler error on output to file and line number

feature: one one error in C/C++ projects

feature: colour syntax


