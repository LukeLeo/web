
The default is to use the languages *inside* the web image
$ ./cyber-dojo up

Whereas this creates a new languages volume and mounts that which replaces the default
$ ./cyber-dojo volume create --name=refactoring --git=https://github.com/JonJagger/cyber-dojo-refactoring-exercises.git
$ ./cyber-dojo up exercises=refactoring


Note: [cyber-dojo up] should check it server is already up and ask you to do [down]
Note: need a check that each docker image has a user in it called nobody
      (don't think it's uid is important)

- - - - - - - - - - - - - - - - - - - - -

)) is Clojure manifest from Frederick in the main web image?
   If not build a new web image and push it to cdf.

- - - - - - - - - - - - - - - - - - - - -

)) ./cyber-dojo catalog

     $ ./cyber-dojo volume create --name=NAME --git=URL
       This would check that the URL adhered to the api,
       viz it specified whether it was languages/exercises/instructions
       If ok it would add a label, eg --label=cyber-dojo-volume
       Could add specific label, eg --label=cyber-dojo-languages-volume

     $ ./cyber-dojo volume ls
       This would filter on the label set, --filter=cyber-dojo-volume

     $ ./cyber-dojo volume rm VOL [VOL...]

     $ ./cyber-dojo volume inspect VOL [VOL...]
       This would do the old catalog listing.
       This should show the origin (URL) of the volume.

     These commands should all be done inside the cyber-dojo.rb file.
     There is no need to do them in the cyber-dojo.sh file.
     Only up/down/sh need to happen in the cyber-dojo.sh file.
     Need to make more use of invoking commands inside an image
     and passing in a volume for it to operate on.

     Coming round to the idea that the main cyber-dojo repo does *not* contain
     app/data/languages etc. There is no default inside the image.
     The [cyber-dojo up] command adds the defaults if you don't provide any.
     The first time you call that it builds the three default volumes (like it builds
     katas data-container) and uses them.

     Issue then becomes are you allowed to delete the default volumes by name?
     I think yes, since then you could create a new one to install your own
     default. If you delete the default and try [cyber-dojo up] then it will
     recreate it. Similarly if you delete the default, try to recreate your
     own and misname it, then again it will try to recreate it.

     Also, do you have to specify
         ./cyber-dojo up languages=VOL
     or
         ./cyber-dojo up VOL [VOL...]

     I think the latter. Makes it easier to extend when allowing unioning.
     What should volume manifest.json file contain?
        type: languages/exercises/instructions
        col-names: [ TEXT, TEXT ],
     Creation of the volume should ADD the source URL.

     cyber-dojo.rb could do with some documentation showing example output
     of various internal commands.

- - - - - - - - - - - - - - - - - - - - -

)) finish the what/how separation

     ./cyber-dojo up exercises=a
        Use meta-data to confirm a is an exercise collection?

     Union of collection. Do in later release.
     ./cyber-dojo up exercises=a,b
        With meta-data the command could simplify to [./cyber-dojo up a,b] ?? no.

        unioning affects the UX quite a lot.
        It also introduces the possiblity of manifests from different collections
        having an identical display_name...

        DONT add the collection name to the path because then it will *NOT* replace
        the default it will union with it...

        Unioning means I will somehow need to create multiple docker-compose yml files
        from a 'template'
        Don't really want multiple yml files - much simpler to pull just one
        from the web image when doing a [./cyber-dojo update]

     git submodules should be data only; move .rb files somewhere else.

     give collections a defined api and meta-data
       each collection manifest specifies if is for languages/exercises/instructions
       each collection manifest adds the URL it was created from
       each language manifest specifies whether its docker-image should be auto pulled. default=no

    [./cyber-dojo up] handling in cyber-dojo.sh needs refactoring.

- - - - - - - - - - - - - - - - - - - - -

)) add another docker-compose.yml for main prod server (not using katas DC yet)
     prod server uses volume-mount for katas (not data-container)
     so I will need to use an docker-compose extension .yml file for
     specifying the katas (like I'll be doing for exercises/languages/instructions)

- - - - - - - - - - - - - - - - - - - - -

)) get latest image running on GCE
   Done with hacked cyber-dojo script file that does not extract docker-compose.yml file
   from web container and mounts katas as a volume rather than a data-container.
   Had to make sure katas folder had user-rights matching user inside the web container.
   $ userdel cyber-dojo
   $ adduser --disabled-password --disabled-login --uid 19661 cyber-dojo
   $ cd /var/www/cyber-dojo
   $ sudo chown -R cyber-dojo:cyber-dojo katas
   $ cd ~
   $ sudo ./cyber-dojo pull all
   $ sudo ./cyber-dojo up

- - - - - - - - - - - - - - - - - - - - -

)) run tests in travis (via exec into web container)
   this will probably require some language images to be pulled
   these should be Alpine'd

- - - - - - - - - - - - - - - - - - - - -

)) get travis to push images to cdf hub
   push images to cyberdiojofoundation hub if tests pass

- - - - - - - - - - - - - - - - - - - - -

)) ./cyber-dojo update
     needs fixing

- - - - - - - - - - - - - - - - - - - - -

)) documentation

- - - - - - - - - - - - - - - - - - - - -

)) submodule meta-data should be able to provide the
   name of the left and right columns.
      manifest.json
      {
          'type':'exercises',
          'lhs-column-text':'name',
          'rhs-column-text':'language'
      }
   It would be nice if you could provide some kind of overview text
   to display which gave general instructions on the collection;
   in this case that they are all refactoring exercises.

   If multiple collections can be unioned, eg
      cyber-dojo up exercises=refactoring,james
   how will they be distinguished from each other?

   Ask James if he can put his 3 exercises onto his github account
   and I will use it as part of documentation.

- - - - - - - - - - - - - - - - - - - - -

)) add confirmation diagnostic to each [cyber-dojo] command.

- - - - - - - - - - - - - - - - - - - - -

Pull the images only when the
$ ./cyber-dojo up ...
command is issued.

- - - - - - - - - - - - - - - - - - - - -

git sub modules
---------------
cd cyber-dojo
cd app/data
git rm -r languages
git submodule add https://github.com/JonJagger/cyber-dojo-languages.git languages
git commit -am "changed app/data/languages to be a submodule"
git push
...
git submodule update

To get latest commit from sub repo
$ cd app/data/languages
$ git pull origin master

To ignore changes in submodules
$ git status --ignore-submodules=all

Added the following to .git/config
[alias]
        st = "!sh -c 'echo git status; git status'"
        smu = "!sh -c 'echo git submodule update; git submodule update'"

----------------------------------------

Day with James :-)


mkdir tryout
cd tryout
git clone https://github.com/JonJagger/cyber-dojo.git
cd cyber-dojo
git branch drop-katas-data-container origin/drop-katas-data-container
git checkout drop-katas-data-container

Edited app/docker/cyber-dojo to make two hard-wired env-vars for paths
point to new locations (under tryout)

Built a new web image

Tried to create a new server ontop of old one.
Could not do [./cyber-dojo restart]
>>>>>>It complained that cdf-nginx and cdf-web already existed.
Manually deleted them.

Started server.
Failed to create a kata because of permissions.
   (Note that katas is being volume-mounted (not volumes-from) in docker-compose.yml)
There is no cyber-dojo user.
On my dev default server
cat /etc/passwd
cyber-dojo:x:19661:19661:Linux User,,,:/home/cyber-dojo:/bin/sh

And this user does not exist on James's machine (Ubuntu)
$ adduser --disabled-password --no-create-home --uid 19661 cyber-dojo
Then
$ cd app/data
$ chown -R cyber-dojo katas

Then could create kata :-)
But problem with no root /cpputest folder (same as I had on my dev macbook)

$ docker run --rm -it cyberdojofoundation/cpp_cpputest sh
$ cd /
$ ls -al

Indeed there is no root folder /cpputest

Tried to recreate gpp_cpputest docker image
rebuilt image
didn't work
There is no user called cyber-dojo *inside* the gpp_cpputest container
Problem is that the image gpp_cpputest is not based FROM user-base
and so does not have cyber-dojo user inside it.
>>>>>>>I think this is not relevant. The user that runs inside the test container
is nobody. The cyber-dojo user is needed only inside the web container
(and also possibly on the host server for volume-mount interactions)


Switched create page to show plain languages
Make katas using C++, CppUTest (and C, CppUTest)
was ok, edited cyber-dojo.sh, /cpputest was there, got a red traffic-light
on the server went to katas/50/5C05.../manifest.json
language:C++ (g++)-CppUTest

Switched create page back to custom exercises.
Made new kata
katas/21/AD6F.../manifest.json
language:C

Aha!!!!
Manually edited the katas manifest.json
to "C++ (g++)-CppUTest"
and it worked. Woooooohoooooo

So the problem is the creation of the kata's manifest.
Looked at the code and fixed up the errors.
Works for both setup cases now: languages and exercises.

Retro: would be nice if you can find out the name of the
container/image from inside the container.

-------------

Tried again.

new server
installed docker
pulled from gihub
pulled new branch
edited app/docker/cyber-dojo to make two hard-wired env-vars for paths
built a new web image
>>>>>>>>tried to create kata - failed with nil Rails error.
Look into this on my own server.

--------------

Features James mentioned during our chat
- - - - - - - - - - - - - - - - - - - -

revert button is in diff dialog again

on enter page, when kata id is entered and buttons become enabled
it would be nice to see the language and exercise names in the footer.

feature: sed in the editor (search and replace)

feature: copy one animal to a new one (keeping whole traffic-light history)

feature: fork giving two options, viz create new exercise-starting-point.

feature: replace duration on dashboard with time-ticks on top of minute columns.

feature: hovering over a traffic-light gives more detail, viz for changed files (not output)
         name of file, no of deleted lines, no of added lines

feature: traffic-lights have some visual indication if there is a
         "suspiciously large change"
         eg more than 1 file changed
         eg more than 3 lines changed in a non-test file

feature: hyperlink of compiler error on output to file and line number

feature: one one error in C/C++ projects

feature: colour syntax


