
app_controllers tests has this warning
/usr/lib/ruby/gems/2.3.0/gems/activesupport-4.1.0/lib/active_support/values/time_zone.rb:285: warning: circular argument reference - now

- - - - - - - - - - - - - - - - - - - - -

lib tests has [can't cd to zzzz] warning

- - - - - - - - - - - - - - - - - - - - -

app/docker/user-base/Dockerfile has this
FROM alpine:edge
Look at moving to an alpine image with a version number.

- - - - - - - - - - - - - - - - - - - - -

Get scripts/dev_server.sh running again by making X...ROOT env-vars
point to where the data repos live. Then try out docker_tar_pipe_runner.sh
mods (above and below) and see if it fixes the warnings.

- - - - - - - - - - - - - - - - - - - - -

web Dockerfile dependencies
I may also be able to remove some apk dependencies for a small speed up.

- - - - - - - - - - - - - - - - - - - - -

./cyber-dojo up
First this will need to create the default-volumes
This takes a while and for a short period there is
no output on the terminal. Print message in volume_create()
in cyber-dojo.rb

- - - - - - - - - - - - - - - - - - - - -

Add option to ./cyber-dojo up to pass in --environment
(checking it is production/development/test)

- - - - - - - - - - - - - - - - - - - - -

Does the Tennis-Ruby exercise still crash the web server?
$ docker pull cyberdojofoundation/ruby_test_unit
And try it.

- - - - - - - - - - - - - - - - - - - - -

How to run local server? Have the 3 git data repos on the local hard disk and
make the CYBER_DOJO_LANGUAGES_ROOT env-vars point to these in script/dev-server.sh
Do that and get tests running locally and inside web container.
Document which (if any) docker images are required for tests to run.
Make these small Alpine-based images.

- - - - - - - - - - - - - - - - - - - - -

travis now runs tests in pipeline

                      t      a  f  e  s   secs  t/sec  a/sec      cov
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  app_helpers        12     24  0  0  0   1.10     10     21   100.00
  app_lib           113    586  0  0  0   0.57    198   1030   100.00
  app_models        116    649  0  0  0   6.91     16     93   100.00
  languages           5     62  0  0  0   0.07     75    932    60.00
  lib                80    515  0  0  0  10.76      7     47    79.38
  app_controllers    54    630  0  1  0   8.96      6     70    97.77
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  total             380   2466  0  1  0  28.37     13     86

  SetupControllerTest#test_'EB77D9'
    show_exercises page uses cached exercises that are runnable
    TypeError: no implicit conversion from nil to integer
    /usr/src/cyber-dojo/lib/display_names_splitter.rb:14:in `[]'
       this is failing because the refactoring exercises have no pulled images

  Would be really handy to be able to pass command to cyber-dojo sh, eg
     ./cyber-dojo sh "cd test/app_controllers && ./setup_test.rb EB77D9"

  docker_tar_pipe_runner.sh
  has this
    sh -c "cd ${SANDBOX} &&  find . -mindepth 1 -delete && tar -zcf - ." \
  could this be simplified to
    sh -c "find ${SANDBOX} -mindepth 1 -delete && tar -zcf - ${SANDBOX}" \
  That might fix the warning mentioned in sh file's comments when running under OSX

- - - - - - - - - - - - - - - - - - - - -

Note: need a check that each docker image has a user in it called nobody
      (I don't think it's uid is important)

- - - - - - - - - - - - - - - - - - - - -

If the server is up you can still do [docker rmi image]
So I still need proper nil error handling on the setup pages

- - - - - - - - - - - - - - - - - - - - -

Crib
ruby cyber-dojo.rb volume create --name=abc --git=https://github.com/JonJagger/cyber-dojo-refactoring-exercises.git

- - - - - - - - - - - - - - - - - - - - -

)) Does the rails log folder needs to be volume-mounted so if the server
   goes down I can inspect the rails log file?

- - - - - - - - - - - - - - - - - - - - -

)) ./cyber-dojo catalog

     $ ./cyber-dojo volume create --name=VOL --git=URL
       This will check that the URL adhered to the api,
       viz it specified whether it was languages/exercises/instructions
       If ok it will add a label, --label=cyber-dojo-volume=languages

       manifest.json in the github source will specify
          'type': (languages/exercises/instructions)
       and if not instructions type
          'lhs-column-title': 'name',
          'rhs-column-title': 'language'

       Then volume can be mounted read-only.

     $ ./cyber-dojo volume rm VOL [VOL...]

     $ ./cyber-dojo volume inspect VOL [VOL...]
       This would do the old catalog listing.
       This should show the origin (URL) of the volume.

     >>>>>>>Dropping submodules. Will that break any tests?
     Can't see because tests don't run inside web container.
     Problem with coverage again...
     Shouldn't if I start with default volumes.

     What should volume manifest.json file contain?
        type: languages/exercises/instructions
        col-names: [ TEXT, TEXT ],

     cyber-dojo.rb could do with some documentation showing example output
     of various internal commands.

- - - - - - - - - - - - - - - - - - - - -

)) finish the what/how separation

     Union of collection. Do in later release.
     ./cyber-dojo up --exercises=alpha,beta
        With meta-data the command could simplify to [./cyber-dojo up a,b] ?? no.

        unioning affects the UX quite a lot.
        It also introduces the possiblity of manifests from different collections
        having an identical display_name...

        DONT add the collection name to the path because then it will *NOT* replace
        the default it will union with it...

        Unioning means I will somehow need to create multiple docker-compose yml files
        from a 'template'
        Don't really want multiple yml files - much simpler to pull just one
        from the web image when doing a [./cyber-dojo update]

     give collections a defined api and meta-data
       each collection manifest specifies if is for languages/exercises/instructions
       each volume label adds the URL it was created from
       each language manifest specifies whether its docker-image should be auto pulled. default=no

- - - - - - - - - - - - - - - - - - - - -

)) cyber-dojo data repos should be data only; move .rb files somewhere else.

- - - - - - - - - - - - - - - - - - - - -

)) add another docker-compose.yml for main prod server
     prod server uses volume-mount for katas (not data-container)
     so I will need to use an docker-compose extension .yml file for
     specifying the katas (like I'll be doing for exercises/languages/instructions)

- - - - - - - - - - - - - - - - - - - - -

)) get latest image running on GCE
   Done with hacked cyber-dojo script file that does not extract docker-compose.yml file
   from web container and mounts katas as a volume rather than a data-container.
   Had to make sure katas folder had user-rights matching user inside the web container.
   $ userdel cyber-dojo
   $ adduser --disabled-password --disabled-login --uid 19661 cyber-dojo
   $ cd /var/www/cyber-dojo
   $ sudo chown -R cyber-dojo:cyber-dojo katas
   $ cd ~
   $ sudo ./cyber-dojo pull all
   $ sudo ./cyber-dojo up

- - - - - - - - - - - - - - - - - - - - -

)) run tests in travis (via exec into web container)
   this will probably require some language images to be pulled
   these should be Alpine'd

- - - - - - - - - - - - - - - - - - - - -

)) get travis to push images to cdf hub
   push images to cyberdojofoundation hub if tests pass

- - - - - - - - - - - - - - - - - - - - -

)) ./cyber-dojo update
     needs fixing

- - - - - - - - - - - - - - - - - - - - -

)) documentation

- - - - - - - - - - - - - - - - - - - - -

)) submodule meta-data should be able to provide the
   name of the left and right columns.
      manifest.json
      {
          'type': 'exercises',
          'lhs-column-title': 'name',
          'rhs-column-title': 'language'
      }
   It would be nice if you could provide some kind of overview text
   to display which gave general instructions on the collection;
   in this case that they are all refactoring exercises.
   Would a simple readme.txt file in the repos root do?

   If multiple collections can be unioned, eg
      cyber-dojo up exercises=refactoring,james
   how will they be distinguished from each other?

   Ask James if he can put his 3 exercises onto his github account
   and I will use it as part of documentation.

- - - - - - - - - - - - - - - - - - - - -

)) add confirmation diagnostic to each [cyber-dojo] command?

- - - - - - - - - - - - - - - - - - - - -

Pull the images only when the
$ ./cyber-dojo up ...
command is issued?

----------------------------------------

Day with James :-)


mkdir tryout
cd tryout
git clone https://github.com/JonJagger/cyber-dojo.git
cd cyber-dojo
git branch drop-katas-data-container origin/drop-katas-data-container
git checkout drop-katas-data-container

Edited app/docker/cyber-dojo to make two hard-wired env-vars for paths
point to new locations (under tryout)

Built a new web image

Tried to create a new server ontop of old one.
Could not do [./cyber-dojo restart]
>>>>>>It complained that cdf-nginx and cdf-web already existed.
Manually deleted them.

Started server.
Failed to create a kata because of permissions.
   (Note that katas is being volume-mounted (not volumes-from) in docker-compose.yml)
There is no cyber-dojo user.
On my dev default server
cat /etc/passwd
cyber-dojo:x:19661:19661:Linux User,,,:/home/cyber-dojo:/bin/sh

And this user does not exist on James's machine (Ubuntu)
$ adduser --disabled-password --no-create-home --uid 19661 cyber-dojo
Then
$ cd app/data
$ chown -R cyber-dojo katas

Then could create kata :-)
But problem with no root /cpputest folder (same as I had on my dev macbook)

$ docker run --rm -it cyberdojofoundation/cpp_cpputest sh
$ cd /
$ ls -al

Indeed there is no root folder /cpputest

Tried to recreate gpp_cpputest docker image
rebuilt image
didn't work
There is no user called cyber-dojo *inside* the gpp_cpputest container
Problem is that the image gpp_cpputest is not based FROM user-base
and so does not have cyber-dojo user inside it.
>>>>>>>I think this is not relevant. The user that runs inside the test container
is nobody. The cyber-dojo user is needed only inside the web container
(and also possibly on the host server for volume-mount interactions)


Switched create page to show plain languages
Make katas using C++, CppUTest (and C, CppUTest)
was ok, edited cyber-dojo.sh, /cpputest was there, got a red traffic-light
on the server went to katas/50/5C05.../manifest.json
language:C++ (g++)-CppUTest

Switched create page back to custom exercises.
Made new kata
katas/21/AD6F.../manifest.json
language:C

Aha!!!!
Manually edited the katas manifest.json
to "C++ (g++)-CppUTest"
and it worked. Woooooohoooooo

So the problem is the creation of the kata's manifest.
Looked at the code and fixed up the errors.
Works for both setup cases now: languages and exercises.

Retro: would be nice if you can find out the name of the
container/image from inside the container.

-------------

Tried again.

new server
installed docker
pulled from gihub
pulled new branch
edited app/docker/cyber-dojo to make two hard-wired env-vars for paths
built a new web image
>>>>>>>>tried to create kata - failed with nil Rails error.
Look into this on my own server.

--------------

Features James mentioned during our chat
- - - - - - - - - - - - - - - - - - - -

revert button is in diff dialog again

on enter page, when kata id is entered and buttons become enabled
it would be nice to see the language and exercise names in the footer.

feature: sed in the editor (search and replace)

feature: copy one animal to a new one (keeping whole traffic-light history)

feature: fork giving two options, viz create new exercise-starting-point.

feature: replace duration on dashboard with time-ticks on top of minute columns.

feature: hovering over a traffic-light gives more detail, viz for changed files (not output)
         name of file, no of deleted lines, no of added lines

feature: traffic-lights have some visual indication if there is a
         "suspiciously large change"
         eg more than 1 file changed
         eg more than 3 lines changed in a non-test file

feature: hyperlink of compiler error on output to file and line number

feature: one one error in C/C++ projects

feature: colour syntax


