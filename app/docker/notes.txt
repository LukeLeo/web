
The default is to use the languages *inside* the web image
$ ./cyber-dojo up

Whereas this creates a new languages volume and mounts that which replaces the default
$ ./cyber-dojo create-collection jon=https://github.com/JonJagger/cyber-dojo-exercises.git
$ ./cyber-dojo up languages=jon


Note: languages/cache.json.readme has old paths in it.

- - - - - - - - - - - - - - - - - - - - -

0. finish the what/how separation

     ./cyber-dojo up exercises=a
        Use meta-data to confirm a is an exercise collection.

     Union of collection. Do in later release.
     ./cyber-dojo up exercises=a,b
        With meta-data the command could simplify to [./cyber-dojo up a,b] ?? no.

        unioning affects the UX quite a lot.
        It also introduces the possiblity of manifests from different collections
        having an identical display_name...

        DONT add the collection name to the path because then it will *NOT* replace
        the default it will union with it...

        Unioning means I will somehow need to create multiple docker-compose yml files
        from a 'template'
        Don't really want multiple yml files - much simpler to pull just one
        from the web image when doing a [./cyber-dojo update]

     git submodules should be data only; move .rb files somewhere else.

     give collections a defined api and meta-data
       each collection manifest specifies if is for languages/exercises/instructions
       each collection manifest adds the URL it was created from
       each language manifest specifies whether its docker-image should be auto pulled. default=no

    [./cyber-dojo up] handling in cyber-dojo.sh needs refactoring.

1. add another docker-compose.yml for main prod server (not using katas DC yet)
     prod server uses volume-mount for katas (not data-container)
     so I will need to use an docker-compose extension .yml file for
     specifying the katas (like I'll be doing for exercises/languages/instructions)

2. get latest image running on GCE

3. run tests in travis (via exec into web container)
   this will probably require some language images to be pulled
   these should be Alpine'd

4. get travis to push images to cdf hub
   push images to cyberdiojofoundation hub if tests pass

5. ./cyber-dojo update
     needs fixing

6. ./cyber-dojo catalog

     if web container is not running do catalog on web image.
     if web container is running do catalog on web container.
     specify catalog of what...? exercises/languages/instructions
     catalog listing should say whether docker-image has been pulled

     app/docker/cyber-dojo.rb (called from app/docker/cyber-dojo.sh) has this
     def catalog
       `#{my_dir}/../data/languages/list_all_images.rb`
     list_all_images.rb needs to move out of the data folder
     Also list_all_images.rb contains this
       languages_home = File.expand_path('.', File.dirname(__FILE__))
       ...
       Dir.glob("#{languages_home}/*/*/manifest.json") do |file|
     This will need a different path and a recursive glob **

     All of list_all_images.rb should go into app/docker/cyber-dojo.rb !!
     cyber-dojo.rb could do with some documentation showing example output
     of various internal commands.

7. documentation

8. make refactoring exercises the default git sub-module instead of James'

9. add confirmation diagnostic to each [cyber-dojo] command.

10. ./cyber-dojo catalog
   this command should not assume the docker-image name exists in
   the cyberdojofoundation hub. Better to get all a list of all docker
   images and don't filter, instead look for specific image-names as
   specified in the manifests.

- - - - - - - - - - - - - - - - - - - - -

Pull the images only when the
$ ./cyber-dojo up ...
command is issued.

- - - - - - - - - - - - - - - - - - - - -

git sub modules
---------------
cd cyber-dojo
cd app/data
git rm -r languages
git submodule add https://github.com/JonJagger/cyber-dojo-languages.git languages
git commit -am "changed app/data/languages to be a submodule"
git push

----------------------------------------

Day with James :-)


mkdir tryout
cd tryout
git clone https://github.com/JonJagger/cyber-dojo.git
cd cyber-dojo
git branch drop-katas-data-container origin/drop-katas-data-container
git checkout drop-katas-data-container

Edited app/docker/cyber-dojo to make two hard-wired env-vars for paths
point to new locations (under tryout)

Built a new web image

Tried to create a new server ontop of old one.
Could not do [./cyber-dojo restart]
>>>>>>It complained that cdf-nginx and cdf-web already existed.
Manually deleted them.

Started server.
Failed to create a kata because of permissions.
   (Note that katas is being volume-mounted (not volumes-from) in docker-compose.yml)
There is no cyber-dojo user.
On my dev default server
cat /etc/passwd
cyber-dojo:x:19661:19661:Linux User,,,:/home/cyber-dojo:/bin/sh

And this user does not exist on James's machine (Ubuntu)
$ adduser --disabled-password --no-create-home --uid 19661 cyber-dojo
Then
$ cd app/data
$ chown -R cyber-dojo katas

Then could create kata :-)
But problem with no root /cpputest folder (same as I had on my dev macbook)

$ docker run --rm -it cyberdojofoundation/cpp_cpputest sh
$ cd /
$ ls -al

Indeed there is no root folder /cpputest

Tried to recreate gpp_cpputest docker image
rebuilt image
didn't work
There is no user called cyber-dojo *inside* the gpp_cpputest container
Problem is that the image gpp_cpputest is not based FROM user-base
and so does not have cyber-dojo user inside it.
>>>>>>>I think this is not relevant. The user that runs inside the test container
is nobody. The cyber-dojo user is needed only inside the web container
(and also possibly on the host server for volume-mount interactions)


Switched create page to show plain languages
Make katas using C++, CppUTest (and C, CppUTest)
was ok, edited cyber-dojo.sh, /cpputest was there, got a red traffic-light
on the server went to katas/50/5C05.../manifest.json
language:C++ (g++)-CppUTest

Switched create page back to custom exercises.
Made new kata
katas/21/AD6F.../manifest.json
language:C

Aha!!!!
Manually edited the katas manifest.json
to "C++ (g++)-CppUTest"
and it worked. Woooooohoooooo

So the problem is the creation of the kata's manifest.
Looked at the code and fixed up the errors.
Works for both setup cases now: languages and exercises.

Retro: would be nice if you can find out the name of the
container/image from inside the container.

-------------

Tried again.

new server
installed docker
pulled from gihub
pulled new branch
edited app/docker/cyber-dojo to make two hard-wired env-vars for paths
built a new web image
>>>>>>>>tried to create kata - failed with nil Rails error.
Look into this on my own server.

--------------

Features James mentioned during our chat
- - - - - - - - - - - - - - - - - - - -

revert button is in diff dialog again

on enter page, when kata id is entered and buttons become enabled
it would be nice to see the language and exercise names in the footer.

feature: sed in the editor (search and replace)

feature: copy one animal to a new one (keeping whole traffic-light history)

feature: fork giving two options, viz create new exercise-starting-point.

feature: replace duration on dashboard with time-ticks on top of minute columns.

feature: hovering over a traffic-light gives more detail, viz for changed files (not output)
         name of file, no of deleted lines, no of added lines

feature: traffic-lights have some visual indication if there is a
         "suspiciously large change"
         eg more than 1 file changed
         eg more than 3 lines changed in a non-test file

feature: hyperlink of compiler error on output to file and line number

feature: one one error in C/C++ projects

feature: colour syntax


