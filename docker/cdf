#!/bin/sh
set -e

# scratch script for dev commands

ME="./$( basename ${0} )"
MY_DIR="$( cd "$( dirname "${0}" )" && pwd )"
ARGS=${@}

HOME=/usr/src/cyber-dojo         # home folder *inside* the images/containers
HUB_USER=cyberdojofoundation     # username on docker hub

RUNNER_DEFAULT=DockerTarPipeRunner
RUNNER=${RUNNER_DEFAULT}         # See app/models/dojo.rb

KATAS_DEFAULT=/var/www/cyber-dojo/katas
KATAS=${KATAS_DEFAULT}           # where old (non data-container) katas may be on the *host*

# important this does NOT include katas
IMAGES=(user-base nginx web)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# TODO: add test command.
# TODO: detect if more than one command entered.
# TODO: get IMAGES from docker-compose config --services
# TODO: logs better names
# TODO: rmi could be more efficient
# TODO: use: echo '    exec COMMAND...        Execs a command in cyber-dojo server container'
# TODO: use: echo '    test [PATH] [ARG...]   Runs PATH tests inside cyber-dojo server container'

show_use()
{
  echo
  echo "Use: ${ME} COMMAND..."
  echo "     ${ME} help"
  echo
  echo 'COMMAND(server containers):'
  echo '     down                 Stop and remove'
  echo "     logs-rails           Prints rails log"
  echo "     logs-web             Prints server log"
  echo '     sh                   Shells in'
  echo '     up                   Create and start'
  echo
  echo 'COMMAND(server images):'
  echo '     build                Builds cyber-dojo server'
  echo '     pull                 Pulls server from hub'
  echo '     push                 Pushes server to hub'
  echo '     rmi                  Removes server images'
  echo
  echo 'COMMAND(language images):'
  echo '     clean                Removes untagged images'
  echo '     images               Lists pulled languages'
  echo '     catalog              Lists all languages'
  echo
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# containers
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

sh()
{
  # TODO: get container name properly
  docker exec --interactive --tty cdf-web sh
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

build()
{
  CWD=`pwd`
  cd "${MY_DIR}" > /dev/null
  for IMAGE in ${IMAGES[*]}
  do
    echo ${HUB_USER}/${IMAGE}
    ./${IMAGE}/build-image.sh ${HOME}
  done
  cd "${CWD}" > /dev/null
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

clean()
{
  docker images -q -f='dangling=true' | xargs docker rmi --force
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

logs_rails()
{
  # TODO: get container name properly
  docker exec cdf-web sh -c "cd log && tail -100 development.log"
}

logs_web()
{
  # TODO: get container name properly
  docker logs cdf-web
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

pull()
{
  for IMAGE in ${IMAGES[*]}
  do
    echo "PULLING: ${HUB_USER}/${IMAGE}"
    docker pull ${HUB_USER}/${IMAGE}
  done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

push()
{
  # TODO: this works from a terminal
  #     docker push cyberdojofoundation/web
  # but
  #     ./cdf push
  # fails?! with
  # unauthorized: access to the requested resource is not authorized
  #
  # $ docker login
  # username: jonjagger
  # password: ...
  # email: ...

  for IMAGE in ${IMAGES[*]}
  do
    echo "PUSHING: ${HUB_USER}/${IMAGE}"
    docker push ${HUB_USER}/${IMAGE}
  done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

rmi()
{
  for IMAGE in ${IMAGES[*]}
  do
    docker rmi -f ${HUB_USER}/${IMAGE} 2&> /dev/null
  done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

test()
{
  # After [up] tests can be run *inside* the container, eg
  # $ docker exec web_1 bash -c "cd test/app_models && ./test_dojo.rb"
  # TODO:
  true
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

delegate()
{
  CWD=`pwd`
  cd "${MY_DIR}" > /dev/null
  ./cyber-dojo ${ARGS}
  cd "${CWD}" > /dev/null
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ $# -eq 0 ]; then
  show_use
  exit
fi

for ARG in "$@"
do
  case ${ARG} in
    # - - - - - - - server containers - - - - - - - -
    down)
      doDown=true
      ;;
    logs-rails)
      doLogsRails=true
      ;;
    logs-web)
      doLogsWeb=true
      ;;
    sh)
      doSh=true
      ;;
    up)
      doUp=true
      ;;
    # - - - - - - - server images - - - - - - - -
    build)
      doBuild=true
      ;;
    pull)
      doPull=true
      ;;
    push)
      doPush=true
      ;;
    rmi)
      doRmi=true
      ;;
    # - - - - - - - languages images - - - - - - - -
    images)
      doImages=true
      ;;
    catalog)
      doCatalog=true
      ;;
    # - - - - - - - misc - - - - - - - -
    help)
      doHelp=true
      ;;
    clean)
      doClean=true
      ;;
    # - - - - - - - something's not right - - - - - - - -
    *)
      echo "${ME}: ${ARG} ?"
      echo "See '${ME} help"
      exit
      ;;
  esac
done

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# process all arguments before executing
# commands to be sure nothing is unknown

#if [ -n "${doExec}"    ]; then exec   ; exit; fi
#if [ -n "${doTest}"    ]; then test   ; exit; fi

if [ -n "${doLogsRails}" ]; then logs_rails; exit; fi
if [ -n "${doLogsWeb}"   ]; then logs_web  ; exit; fi

if [ -n "${doSh}"        ]; then sh   ; exit; fi

if [ -n "${doUp}"        ]; then delegate; exit; fi
if [ -n "${doDown}"      ]; then delegate; exit; fi
if [ -n "${doImages}"    ]; then delegate; exit; fi
if [ -n "${doCatalog}"   ]; then delegate; exit; fi

if [ -n "${doBuild}"     ]; then build; exit; fi
if [ -n "${doPull}"      ]; then pull ; exit; fi
if [ -n "${doPush}"      ]; then push ; exit; fi
if [ -n "${doRmi}"       ]; then rmi  ; exit; fi

if [ -n "${doHelp}"      ]; then show_use; exit; fi
if [ -n "${doClean}"     ]; then clean   ; exit; fi

