
Spike returns multiple commands joined with ' && '
That works for bash
But not for Windows. Use -and instead?
Nope. Messy. Feels wrong.
Have it return something like this...
<QUOTE>
234de5ea08e55bc
docker cp #{dir}/. #{g_cid}:/data
</QUOTE>
And it then executes the [docker cp #{dir}/. #{g_cid}:/data]
and calls back to the container
[docker run ..... finish 234de5ea08e55bc]
which retrieves a json file stored against the id for the first call...
(where obviously the #{} expressions would have been expanded prior to saving the json)
<JSON>
{
  [
    "docker exec #{g_cid} sh -c 'chown -R cyber-dojo:cyber-dojo /data'",
    "docker exec #{g_cid} sh -c 'cd /usr/src/cyber-dojo/cli && ./start_point_check.rb /data'",
    "docker rm -f #{g_cid}"
  ]
}
</JSON>

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Docker for Mac and Docker for Windows is now out.
It makes me realize that the current design of the cyber-dojo
shell script creates a speed-bump for OS portability.
Ideally what I want is a super-simple, super-small cyber-dojo.bat file.
The only commands that the shell script currently actually handles
are (update, up, down). Could these be done in inside a web container?
The main issue is start-point --git/--dir= volume creation is not able
to access *local* dirs.
I should be able to use [docker cp] to copy --git/--dir= into the
container (as a volume directly maybe) so it can run from there.
Something using ExecuteAround...

   call [docker run 'before' arguments] and get returned string
   if exit_success && string != ""
     execute string locally (it will be a docker command)
     if !exit_success
       clean_up and fail
     end
   end
   call [docker run 'after' arguments] - does not need to return a string
   if !exit_success
     clean_up and fail
   end

Specifically, the 'before' call will only actually do something if
the call is a [cyber-dojo start-point create] and what it will do is...
  # 1. make an empty docker volume of the specified name
  #    Check it worked
  # 2. [docker run] to mount empty volume inside docker container and get container CID
  #    Check it worked
  # 3. return a string that is command to fill empty volume from local dir into container
  #    Will name the CID created in step 2

Then the 'after' step will happen. For [cyber-dojo start-point create] this will...
  # 4. ensure cyber-dojo user owns everything in the volume
  # 5. check the volume is a good start-point

