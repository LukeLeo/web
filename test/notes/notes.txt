
manifest.json currently holds this...

  "red_amber_green" : [
    "lambda { |output|",
    "  ruby_pattern = Regexp.new('^(\\d*) runs, (\\d*) assertions, (\\d*) failures, (\\d*) errors')",
    "  if match = ruby_pattern.match(output)",
    "    return :amber if match[4] != '0'",
    "    return :red   if match[3] != '0'",
    "    return :green",
    "  else",
    "    return :amber",
    "  end",
    "}"
  ]

this is stored inside the kata's manifest and thus cannot be edited.
This is a potential problem. Suppose you create a kata by forking from
a well-known kata+avatar+tag. Then the test-framework gets upgraded
and the regex has changed. This change will not be seen when you fork.
I really need to remove the red_amber_green and put it into a named
visible_file. This file then partners cyber-dojo.sh and must always
be present. Thus if you now fork, you get the new lambda and can
edit it if need be. Or better still, you can edit the lambda in the
kata being forked from, and use -1 as the fork tag (which means last tag)
Have to be very careful that this file is never read by cyber-dojo.sh
Thus, even though it is a ruby file, I don't want to put it into a file
whose extension is .rb  Safer to call it, eg, colour.lambda
which appears at the bottom of the file-knave, next to cyber-dojo.sh
and output. Note that if this lambda is run directly by the web server
it would be very insecure. But it can be run inside a new container!
which could even be based on web!
Note also that colour.lambda does not actually need to be
saved to the katas sandbox. And it would be better if it was not.
In fact, if it is not then it could be named a .rb file again.
No. The javascript on the browser wouldn't know that .rb file is
special. And so you would not be able to create a file with that name.
Which would be illogical, since it would not actually be saved into
the test container. If the result of the lambda call on the output is not
one of :red :amber :green then ignore it and use :amber.
How would it work if you re-loaded a kata from before this?
How would it work if you forked from a kata before this?
It could easily detect there was no colour.lambda file.
How would it get the lambda? A kata created after the start-points
re-archtecture has the lambda in its manifest.json file.
Before the start-point re-architecture I need to map from
unit_test_framework entry.

- - - - - - - - - - - - - - - - - - - - -

move setting of environment variables inside rails startup code
and out of docker-compose.yml

app/lib/StubRunner
combine test's hex-id with avater.name in tmp folder

if I do disk[storer.avatar_path(...)] a lot it might be worth adding
storer.avatar_dir(...)

- - - - - - - - - - - - - - - - - - - - -

cyber-dojo shell script is a bit of a mess.
It's because of three commands
1. cyber-dojo up
2. cyber-dojo down
3. cyber-dojo start-point create name --dir=...

I have been assuming that 1 and 2 require a local docker-compose.yml
file. However, what if there was a web_cli image which held the
docker-compose.yml file (as well as the cyber-dojo.sh file)
I have also been assuming 3 requires access to the local disk.
But that is not necessarily true either. I could volume mount the named
dir into the web_cli container.

- - - - - - - - - - - - - - - - - - - - -

add tool-tip for keyboard short-cuts.

- - - - - - - - - - - - - - - - - - - - -

have some way of choosing which setup page gets shown when
you click the [setup a new practice session] button.
Default will be languages.

- - - - - - - - - - - - - - - - - - - - -

o) tests for cyber-dojo script

- - - - - - - - - - - - - - - - - - - - -

an output file is actually stored in the sandbox of an avatar.
this is not right. it means the avatar cant create an output file
for itself. The output 'file' should only be in the manifest.

- - - - - - - - - - - - - - - - - - - - -

for tests I have to put red_amber_green lambdas (such as bash_unit)
into the output.colour_of. Can this dependency be broken?

lib/unit_test_framework_lookup.rb is used only by tests.
it maps from display_name to unit_test_framework which is then
used to determine output.colour_of method.

- - - - - - - - - - - - - - - - - - - - -

Storing the red_amber_green lambda inside the kata's manifest.json
file seems to be essential now that setup start-points can be customized.
However, it creates duplication, and it means that if you find
a fault in the lambda and want to upgrade it, you can't fix it for past katas.
Eg suppose you fork from an existing kata and its unit-test framework has
been upgraded. You cannot edit the lambda.
If could refactor lib/unit_test_framework_lookup.rb so it mapped
from image_name to lamda-src. Then when forking I could see if there was
a (new) master in the lookup.

- - - - - - - - - - - - - - - - - - - - -

web_base/Dockerfile still has this line
   && cd ${CYBER_DOJO_HOME} ; bundle install --without development test \

- - - - - - - - - - - - - - - - - - - - -

Would be good to have a [cyber-dojo] cli command to export
a specific kata to a given folder. This would make it easier
to create custom exercises. Must not export to default VM
on Mac/Windows quickstart-terminal.

- - - - - - - - - - - - - - - - - - - - -

Make [cyber-dojo clean] remove dead containers as well as dead images?

- - - - - - - - - - - - - - - - - - - - -

Note that upgrading Dockerfiles and images might break cyber-dojo.sh
files since paths can be different...
Does the cyber-dojo.sh file belong to the image rather than the start-point?

- - - - - - - - - - - - - - - - - - - - -

un-hardwire setting of 2 core env-vars in cyber-dojo script.
  export CYBER_DOJO_DATA_ROOT="/home/docker/data"
  export CYBER_DOJO_KATAS_ROOT="/home/docker/data/katas"

- - - - - - - - - - - - - - - - - - - - -

cyber-dojo.rb failure messages are
FAILED: ....
Check what [docker] does and mimic that.
$ docker images --ssss
flag provided but not defined: --ssss
See 'docker images --help'.
Test these with shunit2 tests.

- - - - - - - - - - - - - - - - - - - - -

Occasional test failures (when run locally)...
  ForkerControllerTest#test_'EAE021',
    when language no longer exists, the fork fails, and the reason given is language
  SetupControllerTest#test_'EB77D9',
    show_exercises page uses cached exercises that are runnable

  Tests are defintely not unit-tests and almost certainly have order
  dependencies. State of cache files. How to resolve?

  I could reinstate FakeDisk, leave env-vars for data ROOTs, then
  fill FakeDisk with known content, then do access to dojo methods
  such as dojo.exercises

  For now, deleting caches at start of app_controller tests.

- - - - - - - - - - - - - - - - - - - - -

Note: need a check that each docker image has a user in it called nobody
      (I don't think it's uid is important)

- - - - - - - - - - - - - - - - - - - - -

get travis to push images to cdf hub?
push images to cyberdojofoundation hub if tests pass

- - - - - - - - - - - - - - - - - - - - -

add confirmation diagnostic to each [cyber-dojo] command?
